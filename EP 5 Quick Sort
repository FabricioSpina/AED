#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int *x, int *y);
void quicksort(int array[], int length);
void quicksort_recursion(int array[], int low, int high);
int partition(int array[], int low, int high);


int main(){
int vetor[***tamanho do vetor];
int t, i, j, pivo, a, tamanho_do_vetor;
clock_t tempo;
tamanho_do_vetor=***tamanho do vetor;


/* Criando o Vetor de tamanho x com valores aleatorios*/
for (t = 0; t < tamanho_do_vetor; t++){   
  vetor[t] = rand() % 100;
  printf("%d ", vetor[t]);
}

tempo=clock();
  
quicksort(vetor, tamanho_do_vetor);
  
tempo=clock()-tempo;
for (i=0; i < tamanho_do_vetor; i++)
  printf("%d ",vetor[i]);
printf("\nTempo de execução:%f", ((float)tempo/CLOCKS_PER_SEC)*100);
  
}

/*Algoritmo Quick Sort*/
void swap(int *x, int *y){
  int temp = *x;
  *x = *y;
  *y = temp;
}

void quicksort(int array[], int length){
  srand(time(NULL));
  quicksort_recursion(array, 0, length - 1);
}

void quicksort_recursion(int array[], int low, int high){
  if (low < high){
    int pivot_index = partition(array, low, high);
    quicksort_recursion(array, low, pivot_index - 1);
    quicksort_recursion(array, pivot_index + 1, high);
  }
}

int partition(int array[], int low, int high){
  int pivot_index = low + (rand() % (high - low)); 
  if (pivot_index != high)
    swap(&array[pivot_index], &array[high]);

  int pivot_value = array[high];
  int i = low; 

  for (int j = low; j < high; j++){
    if (array[j] <= pivot_value){
      swap(&array[i], &array[j]);
      i++;
    }
  }   
  swap(&array[i], &array[high]); 
  return i;
}
